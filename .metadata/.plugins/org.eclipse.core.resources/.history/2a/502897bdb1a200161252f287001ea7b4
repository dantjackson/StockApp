package com.get;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class StockInvoker {

	List<String> stocks;
	Integer symbolperthread = 5;


	public void main(String[] args)  {
		StockInvoker si = new  StockInvoker();
    try {
         // Call Method To Invoke Processing
    	 si.GetStockListFromDB("null");
         si.IterateBatchRows(null);
     }
     catch (Exception e) {
         e.printStackTrace();
     }
	}
	

	public void IterateBatchRows (ArrayList<String> listofallsymbols) {

		Integer innerLoopMax = 0;
		Integer rowCount = 0;
		rowCount = listofallsymbols.size();
		
         for (int i = 0; i < rowCount; i=i+symbolperthread) {
 
             // Thread Call Every 5 Rows
             innerLoopMax = Math.min(i+symbolperthread,rowCount);
             
             ArrayList<String> subsymbols = new ArrayList<String>();
             //System.out.println("Iteration-" + i);
             // Loop the Record Set From i to 1+100
             for (int c = i; c < innerLoopMax; c++) {

             try {
               // Invoke Processing on a worker thread.
               Runnable worker = new QASWorker("Thread"+i, con, fullStrPayloadData, getWsURL(), getBatchID(), getOrsPoller(), addrs );
               threadpool.execute(worker);
                 }
             catch (Exception e) {
                         e.printStackTrace();
                         // QASLog.logErrorToDB(con, this.BatchID, e.getMessage(),"Error Invoking Worker Thread");}
             finally {};
             }
         }
	}
	
	  public void GetStockListFromDB(String Exchange) {
			
		  List<String> stocks = new ArrayList<String>();
		  Connection con;
		  // Get Stocks Which do not have a Entry on rundate.
		  // Rundates need to tie in with market close times by Exc.
		  String query = "SELECT stock_id "
	              + "FROM hokus.stock s " +
				    " WHERE NOT EXISTS (   " +
	                "			SELECT 1 FROM hokus.stock_detail sd " +
				    "			WHERE sd.stock_id = s.stock_id " +
	                " 			AND DATE(sd.stock_date) = DATE(sysdate()) )";
		  System.out.print(query);
		  
			try {
				con = SqlMySQLConn.getConnection();
				Statement stmt = con.createStatement();			
				ResultSet rs = stmt.executeQuery(query);
			    while (rs.next()) {
			    	  stocks.add("'"+rs.getString(1)+"'");

			    }			
			    con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		this.stocks = stocks;
	  }	
	
}
