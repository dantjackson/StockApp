/**
 * 
 */
package com.get;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
* @author dan jackson Change History :
* To Test The Query
*  https://developer.yahoo.com/yql/console/?debug=true#h=select+*+from+yahoo.finance.quotes
*  JSONObject json =
*  readJsonFromUrl("https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys");
*/
public class StockWorkerSONThread implements Runnable {

	ArrayList<String> symbols;
	Connection con;
	String thread;

	@Override
	public void run() {
		System.out.println(Thread.currentThread().getName() + " Start ");
		// ------------------------------------------------------------
		// Execute Code To Call YSQL API
		// Process JSON and DB Load Data
		// ------------------------------------------------------------
		try {
			getYQLStockDetailJSON();
		} catch (JSONException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getName() + " End.");
	}

	public void main(String thread, ArrayList<String> symbols, Connection con) {
		// Setup Class Vars From Invoker Args
		this.con = con;
		this.symbols = symbols;
		this.thread = thread;
	}

	private static String readAll(Reader rd) throws IOException {
		StringBuilder sb = new StringBuilder();
		int cp;
		while ((cp = rd.read()) != -1) {
			sb.append((char) cp);
		}
		return sb.toString();
	}

	public static JSONObject readJsonFromUrl(String url) throws IOException, JSONException {
		InputStream is = new URL(url).openStream();
		try {
			BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
			String jsonText = readAll(rd);
			JSONObject json = new JSONObject(jsonText);
			return json;
		} finally {
			is.close();
		}
	}

	public void getYQLStockDetailJSON() throws IOException, JSONException {

		Map<String, String> quoteshash = null;
		boolean singlequotebool;

		// GetList Of Stocks
		List<String> StockList = this.symbols; 
		String EscapedStockList = String.join(",", StockList);
		EscapedStockList = URLEncoder.encode(EscapedStockList, "UTF-8");
		System.out.println(EscapedStockList);

		String StringURL = "https://query.yahooapis.com/v1/public/yql?q="
				+ "select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(" + EscapedStockList
				+ ")&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys";
		System.out.println(StringURL);

		JSONObject json = readJsonFromUrl(StringURL);

		System.out.println(json.toString());

		// Recurse the JSON object to the results JSON object
		JSONObject query = json.getJSONObject("query");
		JSONObject results = query.getJSONObject("results");

		// Count Number of keys in results to determine getJSON or JSON Array.
		System.out.print("NumberOfKeys-" + results.length());

		try {
			results.getJSONArray("quote");
			singlequotebool = false;
		} catch (Exception e) {
			singlequotebool = true;
		}

		// If many quotes returned object is JSON array otherwise object!
		if (singlequotebool == true) {
			JSONObject quote = results.getJSONObject("quote");
			quoteshash = ProcessQuoteData(quote);
			System.out.print("NumberOfHashKeys-" + quoteshash.size());
			InsertStockDetail(quoteshash);
		} else {

			JSONArray quote = results.getJSONArray("quote");

			for (int i = 0, size = quote.length(); i < size; i++) {
				JSONObject objectInArray = quote.getJSONObject(i);
				quoteshash = ProcessQuoteData(objectInArray);
				InsertStockDetail(quoteshash);
			}
		}
	} // Sub

}
