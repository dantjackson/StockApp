package com.get;

// https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22)&format=json&diagnostics=true&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback=
	
// https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.json.JSONException;
import org.json.JSONObject;

public class StockReadYahooJSON {

  private static String readAll(Reader rd) throws IOException {
    StringBuilder sb = new StringBuilder();
    int cp;
    while ((cp = rd.read()) != -1) {
      sb.append((char) cp);
    }
    return sb.toString();
  }

  public static JSONObject readJsonFromUrl(String url) throws IOException, JSONException {
    InputStream is = new URL(url).openStream();
    try {
      BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
      String jsonText = readAll(rd);
      JSONObject json = new JSONObject(jsonText);
      return json;
    } finally {
      is.close();
    }
  }

  public static void main(String[] args) throws IOException, JSONException {
    //JSONObject json = readJsonFromUrl("https://graph.facebook.com/19292868552");
    
	 Connection con = null;  
	  
    JSONObject json = readJsonFromUrl("https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys");
    
    //System.out.println(json.toString());

    // Recurse the JSON object to the results JSON object
    JSONObject query = json.getJSONObject("query");
    JSONObject results = query.getJSONObject("results");
    JSONObject quote = results.getJSONObject("quote");
   
    // Create new StockDetail Class
    StockDetail stockDetail = new StockDetail();
    
    // Set The Stock Class Values To ArrayList
    String symbol = quote.getString("symbol");
    System.out.println(symbol);
    
    // Write the stock data to the StockDetailClass.
    stockDetail.setStockID("symbol");
    
    // Create Arraylist of Class
    
    // Write Class Data To The DB
	try {
		con = SqlMySQLConn.getConnection();
		Statement s = con.createStatement();
		String sql = "";
		ResultSet rs = s.executeQuery(sql);
	} catch (SQLException e) {
		e.printStackTrace();
		throw new RuntimeException(e);
	} finally {
		SqlMySQLConn.close(con);
	}    

  }
  
  public void WritetoDB(String StockId)
  {
	  
      String InsrtSql = "INSERT INTO STG_ORS_" + poller + "_QAS_ADDR " +
              " ( address_line_1, address_line_2, town, county, postcode, country_code, " +
                  "geo_latitude, geo_longitude, unique_address_id, precleansed_address, batch_id, addr_type, parcel_no) " +
              " VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,? )";
 pstmt = conn.prepareStatement(InsrtSql);
 conn.setAutoCommit(false);
 System.out.println(InsrtSql);
	  
          try
          {  
                  pstmt.setString (1, AddressLine1);
                  pstmt.setString (2, AddressLine2);
                  pstmt.setString (3, Town);
                  pstmt.setString (4, County);
                  pstmt.setString (5, PostCode);
                  pstmt.setString (6, CountryCode);
                  pstmt.setString (7, GeoLatitude);
                  pstmt.setString (8, GeoLongiture);
                  pstmt.setString (9, UniqAddressId);
                  pstmt.setString (10, PreCleansedAddress);
                  pstmt.setString (11, BatchId);                   
                  pstmt.setString (12, AddrType);
                  pstmt.setString (13, ParcelInstId);                   
                  
                  pstmt.addBatch();
                  commitCount++;
                  if (commitCount == 100)
                  {
                          pstmt.executeBatch();
                          commitCount=0;
                          System.out.println ("Committed.");
                  }
                 
          }
          catch(Exception sqle)
          {
                  System.out.println ("Exception in writing to the database "+ sqle.getMessage());
          }
  }
  
  
  
}

