package com.get;

// https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22)&format=json&diagnostics=true&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback=
	
// https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class StockReadYahooJSON {

  private static String readAll(Reader rd) throws IOException {
    StringBuilder sb = new StringBuilder();
    int cp;
    while ((cp = rd.read()) != -1) {
      sb.append((char) cp);
    }
    return sb.toString();
  }

  public static JSONObject readJsonFromUrl(String url) throws IOException, JSONException {
    InputStream is = new URL(url).openStream();
    try {
      BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
      String jsonText = readAll(rd);
      JSONObject json = new JSONObject(jsonText);
      return json;
    } finally {
      is.close();
    }
  }

  public static void main(String[] args) throws IOException, JSONException {
    //JSONObject json = readJsonFromUrl("https://graph.facebook.com/19292868552");
	
	Map<String,String> quoteshash = null;
	  
	// To Test The Query https://developer.yahoo.com/yql/console/?debug=true#h=select+*+from+yahoo.finance.quotes
    JSONObject json = readJsonFromUrl("https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys");
    
    System.out.println(json.toString());

    // Recurse the JSON object to the results JSON object
    JSONObject query = json.getJSONObject("query");
    JSONObject results = query.getJSONObject("results");
    
    // Count Number of keys in results to determine getJSON or JSON Array.
    System.out.print("NumberOfKeys-"+results.length());
    
    // If many quotes returned object is JSON array otherwise object!
    if (results.length() == 1) {
        JSONObject quote = results.getJSONObject("quote");
        quoteshash = ProcessQuoteData(quote);
        InsertStockDetail(quoteshash);
    }
    else{
    	
    	JSONArray quote = results.getJSONArray("quote");
        
	    for (int i = 0, size = quote.length(); i < size; i++)
	    {
	      JSONObject objectInArray = quote.getJSONObject(i);
	
	      // "...and get thier component and thier value."
	      String[] elementNames = JSONObject.getNames(objectInArray);
	      System.out.printf("%d ELEMENTS IN CURRENT OBJECT:\n", elementNames.length);
	      for (String elementName : elementNames)
	      {
	    	try {  
	        String value = objectInArray.getString(elementName);
	        System.out.printf("name=%s, value=%s\n", elementName, value);
	    	}
	    	catch (Exception e){
	    		// Do Nothing
	    	}	
	      }
	      quoteshash = ProcessQuoteData(quote);
	      InsertStockDetail(quoteshash);
	      System.out.println();
	    }       	
    }
  }  // Sub
  
  public static Map<String,String> ProcessQuoteData(JSONObject json) {
	  Map<String,String> out = null;
	    Iterator<String> keys = json.keys();
	    while(keys.hasNext()){
	        String key = keys.next();
	        String val = null;
	        val = json.getString(key);
	        if(val != null){
	            out.put(key,val);
	        }
	    }    
	    return out;	  
  }
    
  public static void InsertStockDetail (Map<String,String> input) {

		 Connection con = null;  	  
	  
	    // Write Class Data To The DB
		try {
			con = SqlMySQLConn.getConnection();
			WritetoDB(input.get("Symbol"), con);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} finally {
			SqlMySQLConn.close(con);
		}    	  
  }
  
  /* Add Hash Map 	    // http://stackoverflow.com/questions/12870332/how-can-i-iterate-jsonobject-to-get-individual-items
  /* Don't use the class.
    
 /*   Iterator<String> json_keys = results.keys();
    while( json_keys.hasNext() ){
    	
    	String key = json_keys.next();
    	
        //JSONObject quote = results.getJSONObject("quote");
    	System.out.println(key);
        JSONObject quote = results.getJSONObject(key);
        	
	    // Create new StockDetail Class
	    StockDetail stockDetail = new StockDetail();
	    
	    // Set The Stock Class Values To ArrayList
	    String symbol = quote.getString("symbol");
	    
	    System.out.println(symbol);
	    
	    // Parse this ??
	    
	    // Write the stock data to the StockDetailClass.
	    stockDetail.setStockID(symbol);
	    stockDetail.setName(quote.getString("Name"));
	    stockDetail.setBid(Double.parseDouble(quote.getString("Bid")));
	    stockDetail.setLastTradeDate(quote.getString("LastTradeDate"));
	    
	    // Create Arraylist of Class ??
	    
	    // Write Class Data To The DB
		try {
			con = SqlMySQLConn.getConnection();
			WritetoDB(stockDetail.getStockID(), con);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} finally {
			SqlMySQLConn.close(con);
		}    

    } // For
*/   // Sub JSON Read
  
  public static void WritetoDB(String StockId, Connection wrtCon)
  {
	  
      String InsrtSql = "INSERT INTO hokus.stock_detail " +
              " ( stock_id) " +
              " VALUES ( ?)";
      java.sql.PreparedStatement pstmt;
      
      System.out.println(InsrtSql);
	  
      try
      {  
          pstmt = wrtCon.prepareStatement(InsrtSql);
          wrtCon.setAutoCommit(true);    
    	  pstmt.setString (1, StockId);                  
              
           pstmt.addBatch();
           pstmt.executeBatch();
           System.out.println ("Committed.");
      }
      catch(Exception sqle)
      {
              System.out.println ("Exception in writing to the database "+ sqle.getMessage());
      }
  }
} // class

